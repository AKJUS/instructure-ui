#!/bin/bash

set -e

PACKAGE_DIR=packages
COMPONENT_TEMPLATE_DIR=scripts/templates/component

current_version=$(node -p "require('./lerna').version")

# If no args are supplied, ask for user input
if [ $# -eq 0 ]; then
  read -p 'Component name (PascalCase): ' component
else
  component=$1
fi

package=`echo ${component} | sed 's/\([a-z0-9]\)\([A-Z]\)/\1\-\2/g' | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`

export COMPONENT=$component
export PACKAGE="ui-${package}"
export VERSION=$current_version

if [ ! -d "$PACKAGE_DIR" ]; then
  echo Cannot find component directory!
  exit 1
fi

if [ ! -d "$COMPONENT_TEMPLATE_DIR" ]; then
  echo Cannot find component template!
  exit 1
fi

if [ -d "$PACKAGE_DIR/$PACKAGE" ]; then
  echo Oops! Package $PACKAGE exists!
  exit 1
fi

echo Generating $PACKAGE files in $PACKAGE_DIR/$PACKAGE

cp -r $COMPONENT_TEMPLATE_DIR $PACKAGE_DIR/$PACKAGE

# Update file names
find $PACKAGE_DIR/$PACKAGE -name 'Package*' -type f -exec bash -c 'mv "$1" "${1/Package/$PACKAGE}"' -- {} \;

# Update file contents
if [[ "$OSTYPE" == darwin* ]]; then
  find $PACKAGE_DIR/$PACKAGE -type f -exec sed -i '' "s/\${PACKAGE}/$PACKAGE/g" '{}' \;
else
  find $PACKAGE_DIR/$PACKAGE -type f -exec sed -i -e "s/\${PACKAGE}/$PACKAGE/g" '{}' \;
fi

if [[ "$OSTYPE" == darwin* ]]; then
  find $PACKAGE_DIR/$PACKAGE -type f -exec sed -i '' "s/\${VERSION}/$VERSION/g" '{}' \;
else
  find $PACKAGE_DIR/$PACKAGE -type f -exec sed -i -e "s/\${VERSION}/$VERSION/g" '{}' \;
fi

# Update file contents
if [[ "$OSTYPE" == darwin* ]]; then
  find $PACKAGE_DIR/$PACKAGE -type f -exec sed -i '' "s/\${COMPONENT}/$COMPONENT/g" '{}' \;
else
  find $PACKAGE_DIR/$PACKAGE -type f -exec sed -i -e "s/\${COMPONENT}/$COMPONENT/g" '{}' \;
fi

# Update directory names
find $PACKAGE_DIR/$PACKAGE -depth -name 'Component*' -type d -execdir bash -c 'mv "$1" "${1//Component/$COMPONENT}"' -- {} \;

# Update file names
find $PACKAGE_DIR/$PACKAGE -name 'Component*' -type f -exec bash -c 'mv "$1" "${1/Component/$COMPONENT}"' -- {} \;
