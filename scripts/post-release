#!/usr/bin/env node

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

require('dotenv').config()

const cp = require('child_process')
const Jira = require('jira-client')
const https = require('https')

const pkg = require('../package.json')
const fs = require('fs')

cp.exec('git describe --exact-match', (err, out) => {
  if (err || out.trim() !== `v${pkg.version}`) {
    console.error(`Expected Git tag: v${pkg.version}`) // eslint-disable-line no-console
    process.exit(0)
  }

  const {
    JIRA_PEM,
    JIRA_TOKEN,
    JIRA_HOST,
    JIRA_CONSUMER_KEY,
    JIRA_SECRET,
    JIRA_PROJECT_ID,
    JIRA_PROJECT_KEY
  } = process.env

  const jira = new Jira({
    host: JIRA_HOST,
    protocol: 'https',
    oauth: {
      consumer_key: JIRA_CONSUMER_KEY,
      consumer_secret: fs.readFileSync(JIRA_PEM),
      access_token: JIRA_TOKEN,
      access_secret: JIRA_SECRET
    }
  })

  jira.createVersion({
    name: `${pkg.name} ${pkg.version}`,
    archived: false,
    released: true,
    projectId: JIRA_PROJECT_ID
  }).then((version) => {
    // let version = {
    //   "self":"https://instructure.atlassian.net/rest/api/2/version/46639",
    //   "id":"46639",
    //   "name":"instructure-ui 5.10.0",
    //   "archived":false,
    //   "released":true,
    //   "projectId":17900
    // }
    // version.url = `https://${JIRA_HOST}/projects/${JIRA_PROJECT_KEY}/versions/${version.id}`

    console.log(`Created ${version.name}:`, JSON.stringify(version)) // eslint-disable-line no-console

    let issueKeys = []

    cp.exec(`./scripts/get-issues-in-release`, (err, out) => {
      if (err) {
        console.error(`Error looking up issues for this release: ${err}`) // eslint-disable-line no-console
        process.exit(1)
      }

      issueKeys = (out ? out.split(' ') : [])
        .map(key => key.trim())
        .filter(key => key && key.includes(JIRA_PROJECT_KEY))

      console.log(`Issues in this release: ${issueKeys.join(', ')}`) // eslint-disable-line no-console

      Promise.all(issueKeys.map((issueKey) => {
          return jira.updateIssue(issueKey, {
            update: {
              fixVersions: [{ add: { name: version.name } }]
            }
          })
      }))
      .then(() => {
        console.log(`Updated ${issueKeys.join(', ')} to reflect the fix version.`) // eslint-disable-line no-console

        const {
          SLACK_CHANNEL,
          SLACK_USERNAME,
          SLACK_EMOJI,
          CHANGELOG_URL,
          SLACK_TOKEN
        } = process.env

        if (SLACK_CHANNEL && SLACK_USERNAME) {
          console.log(`Pinging slack channel: ${SLACK_CHANNEL}`) // eslint-disable-line no-console
          const message = `PSA!\n *${pkg.name} v${pkg.version} has been published!* :party: \n ${CHANGELOG_URL} \nIssues in this release: ${issueKeys.join(', ')}`
          const payload = {
            'channel': SLACK_CHANNEL,
            'username': SLACK_USERNAME,
            'icon_emoji': SLACK_EMOJI || ':party:',
            'text': message,
            'link_names': 1
          }

          const req = https.request({
            path: `/services/T028ZAGUD/B46KAQ20P/${SLACK_TOKEN}`,
            hostname: 'hooks.slack.com',
            method: 'POST'
          })

          req.write(JSON.stringify(payload))
          req.end()

          console.log(`Message: "${message}"`) // eslint-disable-line no-console
        }
      })
      .catch((err) => {
        console.log('Error: ', JSON.stringify(err)) // eslint-disable-line no-console
        process.exit(1)
      })
    })
  })
})
