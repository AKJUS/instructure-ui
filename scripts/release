#!/bin/bash

set -e

NPM_CLIENT=$(npm bin)/yarn

########################################
# Make sure working directory is clean #
########################################
if [ -n "$(git status --porcelain)" ]; then
  echo "‚ö†Ô∏è   Refusing to operate on unclean working directory"
  echo "Use \"git status\" to see which files have been modified"
  exit 1
fi

#####################
# Fetch remote tags #
#####################
git fetch origin --tags --force

#######################
# Get the commit info #
#######################
commit=$(git rev-parse --short HEAD)
commit_msg=$(git log -1 --pretty=oneline --abbrev-commit)
description=$(git describe --match "v[0-9]*" --first-parent)

#########################
# Determine the npm tag #
#########################
while getopts ":t:" opt; do
  case $opt in
    t)
      echo "-t (npm tag): $OPTARG" >&2
      npm_tag=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if [[ -z "$npm_tag" ]]; then
  if [[ "$commit_msg" =~ "chore(release): " ]]; then
    npm_tag=latest
  else
    npm_tag=rc
  fi
fi

##############################
# Determine the release type #
##############################
if [[ "$npm_tag" == "stable" || "$npm_tag" == "latest" ]]; then
  release_type=stable
else
  release_type=prerelease
fi

###########################################
# Determine next version for pre-releases #
###########################################
if [[ "$release_type" == "prerelease" ]]; then
  $(npm bin)/standard-version
fi

next_version=$(node -p "require('./package').version")

if [[ "$release_type" == "prerelease" ]]; then
  index=$(echo $description| cut -d'-' -f 2)
  next_version="${next_version}-${npm_tag}.${index}+${commit}"
  git reset --hard $commit
fi

git_tag="v$next_version"

#######################################
# Check if release tag already exists #
#######################################
if [ "`git tag --list $git_tag`" ]; then
  echo "‚ö†Ô∏è   Git tag for $git_tag already exists!"
  if [[ "$release_type" == "stable" ]]; then
    echo "Run the bump \"yarn bump\" script to update the version prior to running a stable release."
  else
    echo "Run \"yarn info [package]@[version]\" to see published versions."
  fi
  exit
fi

echo "Commit SHA: $commit ..."
echo "Commit Message: $commit_msg ..."
echo "Commit Description: $description ..."
echo "Npm Tag: $npm_tag ..."
echo "Git Tag: $git_tag ..."
echo "Next Version: $next_version ..."

if [[ -z "$POST_MERGE_BUILD" ]]; then
  read -p "Continue? [y/n]" -n 1 -r; echo
  if ! [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Stopped"
    exit
  fi
fi

###########################
# Publish packages to npm #
###########################
echo "üì¶  Publishing $next_version with tag $npm_tag"
$(npm bin)/lerna publish --skip-git --npm-tag $npm_tag --repo-version $next_version --force-publish=* --yes

##########################################
# Tag release commit for stable releases #
##########################################
if [[ "$release_type" == "stable" ]]; then
  echo "Tagging version $git_tag ..."
  git tag -am "Version $next_version" $git_tag
  git push origin $git_tag
fi

#####################################
# Build and deploy docs to gh-pages #
#####################################
if [[ "$npm_tag" == "latest" ]]; then
  echo "Deploying version $next_version of the documentation..."
  $NPM_CLIENT run deploy
fi

echo "Version $next_version was successfully released!"
