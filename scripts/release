#!/bin/bash -e

NPM_CLIENT=$(npm bin)/yarn

########################################
# Make sure working directory is clean #
########################################
if [ ! -z "$(git status --porcelain)" ]; then
  echo Refusing to operate on unclean working directory
  echo Use \"git status\" to see which files have been modified
  exit 1
fi

##################################
# Fetch remote tags and branches #
##################################
git fetch origin --tags --force

#########################
# Determine the npm tag #
#########################
while getopts ":t:" opt; do
  case $opt in
    t)
      echo "-t (npm tag): $OPTARG" >&2
      npm_tag=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if ! [[ $npm_tag ]]; then
  npm_tag=dev
fi

##############################
# Determine the release type #
##############################
if [[ "$npm_tag" == "stable" || "$npm_tag" == "latest" ]]; then
  release_type=stable
else
  release_type=prerelease
fi

#############################
# Get version and commit id #
#############################
next_version=$(node -p "require('./package').version")
commit=$(git rev-parse --short HEAD)
commit_msg=$(git log -1 --pretty=oneline --abbrev-commit)

###########################################
# Determine next version for pre-releases #
###########################################
if [[ "$release_type" == "prerelease" ]]; then
  printf "Enter version or <ENTER> to release $next_version: "
  read next_version
fi

printf "Version: $next_version ...\n"
printf "Commit: $commit_msg ...\n"
read -p "Continue? [y/n]" -n 1 -r; echo
if ! [[ $REPLY =~ ^[Yy]$ ]]; then
  echo "Stopped"
  exit
fi

#######################
# Prepare the release #
#######################
printf "Installing version $next_version ...\n"
$NPM_CLIENT install
printf "Preparing version $next_version ...\n"
$NPM_CLIENT run test

###########################
# Publish packages to npm #
###########################
printf "Publishing $next_version with tag $npm_tag\n"
$(npm bin)/lerna publish --skip-git --npm-tag $npm_tag --repo-version $next_version --force-publish=*

######################
# Tag release commit #
######################
git_tag="v$next_version"

printf "Tagging version $git_tag ...\n"

# Delete the local tag if it already exists
if [ "`git tag --list $git_tag`" ]; then
  git tag -d $git_tag
fi

git tag -am "Version $next_version" $git_tag
git push origin $git_tag

#####################################
# Build and deploy docs to gh-pages #
#####################################
if [[ "$npm_tag" == "latest" ]]; then
  printf "Deploying version $next_version of the documentation...\n"
  $NPM_CLIENT run deploy
fi

printf "Version $next_version was successfully released!\n"
