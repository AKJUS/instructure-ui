#!/bin/bash

set -e

########################################
# Make sure working directory is clean #
########################################
if [ -n "$(git status --porcelain)" ]; then
  echo Refusing to operate on unclean working directory
  echo Use \"git status\" to see which files have been modified
  exit 1
fi

##################################
# Fetch remote tags and branches #
##################################
git fetch origin --tags --force

#########################
# Determine the version #
#########################
while getopts ":v:" opt; do
  case $opt in
    v)
      echo "-v (version): $OPTARG" >&2
      next_version=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if ! [[ $next_version ]]; then
  $(npm bin)/standard-version
  next_version=$(node -p "require('./package').version")
fi

###################
# Update packages #
###################
echo "Updating packages and generating the changelog for $next_version ..."
$(npm bin)/yarn version --no-git-tag-version --new-version $next_version
$(npm bin)/lerna publish --skip-git --skip-npm --force-publish=* --repo-version $next_version

##########################
# Create the bump commit #
##########################
echo "Committing version bump commit for $next_version ..."
git commit -a -m "chore(release): $next_version"
